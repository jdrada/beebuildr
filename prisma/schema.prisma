// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  username      String?   @unique
  accounts      Account[]
  sessions      Session[]

  // Custom fields
  memberships   OrganizationMember[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Additional fields for projects
  createdProjects  Project[]
  projectsViewing  ProjectViewer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrganizationType {
  CONTRACTOR
  STORE
}

model Organization {
  id          String           @id @default(cuid())
  name        String
  type        OrganizationType
  members     OrganizationMember[]
  budgets     Budget[]        // Only for CONTRACTOR orgs
  items       Item[]          // Only for STORE orgs
  projects    Project[]       // Only for CONTRACTOR orgs
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum MemberRole {
  ADMIN
  MEMBER
  VIEWER
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           MemberRole
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([userId, organizationId])
}

model Budget {
  id             String        @id @default(cuid())
  title          String
  description    String?
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  budgetItems    BudgetItem[]
  project        Project?      @relation(fields: [projectId], references: [id])
  projectId      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Item {
  id             String        @id @default(cuid())
  name           String
  description    String?
  price          Decimal       @db.Decimal(10, 2)
  unit           String        // e.g., "each", "sqft", "gallon"
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  budgetItems    BudgetItem[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model BudgetItem {
  id          String   @id @default(cuid())
  budgetId    String
  itemId      String
  quantity    Decimal  @db.Decimal(10, 2)
  priceAtTime Decimal  @db.Decimal(10, 2) // Snapshot of item price when added to budget
  budget      Budget   @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([budgetId, itemId])
}

// Project model with enhanced fields
model Project {
  id              String       @id @default(cuid())
  name            String
  description     String?
  status          ProjectStatus @default(PLANNING)
  
  // Client Information
  clientName      String?      // Full name or company name
  contactPerson   String?      // Contact person if it's a company
  clientPhone     String?      // Phone number
  clientEmail     String?      // Email address
  billingAddress  String?      // Billing address
  
  // Project Information
  projectAddress  String?      // Location where construction will take place
  projectType     ProjectType? @default(RESIDENTIAL) // Type of project
  projectScope    String?      // Brief description of what the project entails
  startDate       DateTime?    // Proposed or estimated start date
  endDate         DateTime?    // Proposed or estimated end date
  
  // Existing fields
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  budgets         Budget[]
  viewers         ProjectViewer[]
  createdById     String
  createdBy       User         @relation(fields: [createdById], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

// Project viewers (for clients) to control access
model ProjectViewer {
  id             String      @id @default(cuid())
  projectId      String
  project        Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  userId         String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
  
  @@unique([projectId, userId])
}

// Project status enum
enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

// Project type enum
enum ProjectType {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  INSTITUTIONAL
  INFRASTRUCTURE
  RENOVATION
  OTHER
}
